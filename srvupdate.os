#Использовать cmdline
#Использовать logos
#Использовать json
#Использовать v8runner
#Использовать 1commands
#Использовать params

Перем ПараметрыИсполнения; // Содержит все переменные необходимые для работы;

Функция ПолучитьПараметры( Знач пАргументы )
	
	Парсер = Новый ПарсерАргументовКоманднойСтроки();
	
	Парсер.ДобавитьПараметр("ИмяПроекта");
	Парсер.ДобавитьПараметр("ИдентификаторКоммита");
	Парсер.ДобавитьПараметр("ПутьКПлатформе");
	Парсер.ДобавитьПараметр("СтрокаПодключения");
	Парсер.ДобавитьПараметр("Пользователь");
	Парсер.ДобавитьПараметр("Пароль");
	Парсер.ДобавитьПараметр("ВерсияEDT");	

	Парсер.ДобавитьИменованныйПараметр("--project");
	Парсер.ДобавитьИменованныйПараметр("--commitid");
	Парсер.ДобавитьИменованныйПараметр("--platform");
	Парсер.ДобавитьИменованныйПараметр("--base");
	Парсер.ДобавитьИменованныйПараметр("--usr");
	Парсер.ДобавитьИменованныйПараметр("--pwd");
	Парсер.ДобавитьИменованныйПараметр("--edt");

	Параметры = Парсер.Разобрать(пАргументы);
	
	Если Параметры.Количество() < 2 Тогда
		
		Сообщить("Передано невалидное количество параметров");
			
		ЗавершитьРаботу(1);
		
	КонецЕсли;	
		
	Возврат Параметры;
	
КонецФункции

Функция ПолучитьСписокИзмененныхФайлов(ИдентификаторКоммита)

	ИмяФайлаРазниц  = ИдентификаторКоммита + "file_list.txt";

	ПараметрыКоманды = "diff-tree -r --no-commit-id --name-only --diff-filter=ACMRT ";
	ПараметрыКоманды = ПараметрыКоманды + ИдентификаторКоммита + " > " + ИмяФайлаРазниц;

	Команда = Новый Команда;

	Команда.УстановитьКоманду("git");
	Команда.ДобавитьПараметр(ПараметрыКоманды);

	КодВозврата = Команда.Исполнить();

	Если КодВозврата <> 0 Тогда
		ЗавершитьРаботу(1);
	КонецЕсли;

	МассивИменФайлов = Новый Массив;

	ЧтениеТекста = Новый ЧтениеТекста(ИмяФайлаРазниц, КодировкаТекста.UTF8);
	СтрокаДокумента = ЧтениеТекста.ПрочитатьСтроку();

	Пока СтрокаДокумента <> Неопределено Цикл              
		
		МассивИменФайлов.Добавить(СтрокаДокумента);
		СтрокаДокумента = ЧтениеТекста.ПрочитатьСтроку();           
		
	КонецЦикла;

	ЧтениеТекста.Закрыть();

	УдалитьФайлы(ИмяФайлаРазниц);

	Возврат МассивИменФайлов;

КонецФункции

Функция ОпределитьКаталогиКопирования(МассивИменФайлов)

	ГлубинаКопирования = 3;

	Если МассивИменФайлов.Количество() = 0 Тогда 
		Сообщить("Список файлов пустой, завершаем работу");
		ЗавершитьРаботу(0);
	КонецЕсли;

	МассивКаталогов = Новый Массив;

	Для Каждого Файл Из МассивИменФайлов Цикл
		
		ЧастиФайла = СтрРазделить(Файл, "/");
		
		Если ЧастиФайла.Количество() < ГлубинаКопирования Тогда
			Продолжить;
		КонецЕсли;
		
		Каталог = "";

		Для Итер = 0 По ГлубинаКопирования Цикл
			
			Если Итер <> 0 Тогда
				Каталог = Каталог + "\";
			КонецЕсли;

			Каталог = Каталог + ЧастиФайла[Итер];

		КонецЦикла;

		Если МассивКаталогов.Найти(Каталог) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;

		МассивКаталогов.Добавить(Каталог);
		
	КонецЦикла;	
	
	Возврат МассивКаталогов;

КонецФункции

Процедура КопироватьКаталог(ИсходныйКаталог, КаталогНазначения)
	 
	ПапкаНазначения = КаталогНазначения + "\" + ИсходныйКаталог;

	Команда = Новый Команда;
	
	Команда.УстановитьКоманду("xcopy");
	Команда.ДобавитьПараметр(ТекущийКаталог() + "\" + ИсходныйКаталог);
	Команда.ДобавитьПараметр(ТекущийКаталог() + "\" + ПапкаНазначения + "\");
	Команда.ДобавитьПараметр(" /H /Y /C /R /S ");

	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить("Ошибка копирования каталога");
		ЗавершитьРаботу(1);
	КонецЕсли;
    
КонецПроцедуры

Процедура КопироватьКаталоги(КаталогРазниц, МассивКаталогов)

	СоздатьКаталог(КаталогРазниц);

	Для Каждого Каталог Из МассивКаталогов Цикл
		КопироватьКаталог(Каталог, КаталогРазниц);
	КонецЦикла;
	
КонецПроцедуры

Процедура ИнициализироватьКаталогРазниц()

	МассивИменФайлов = ПолучитьСписокИзмененныхФайлов(ПараметрыИсполнения.ИдентификаторКоммита);
	МассивКаталогов  = ОпределитьКаталогиКопирования(МассивИменФайлов);

	КопироватьКаталоги(ПараметрыИсполнения.КаталогИнкремента, МассивКаталогов);

	КопироватьВспомогательныеФайлы(ПараметрыИсполнения.КаталогИнкремента, ПараметрыИсполнения.ИмяПроекта);

	ПараметрыИсполнения.МассивИзмененныхФайлов = МассивИменФайлов;

КонецПроцедуры

Процедура КопироватьВспомогательныеФайлы(КаталогРазниц, ИмяПроекта)

	КаталогНастроек     = ИмяПроекта + "\.settings";
	КаталогИнформации   = ИмяПроекта + "\DT-INF";
	КаталогКонфигурации = ИмяПроекта + "\src\Configuration";
	НаименованиеФайлаПроекта        = ИмяПроекта    + "\.project";
	ЦелевоеНаименованиеФайлаПроекта = КаталогРазниц + "\" + ИмяПроекта + "\.project"; 

	КопироватьКаталог(КаталогНастроек, КаталогРазниц);
	КопироватьКаталог(КаталогИнформации, КаталогРазниц);
	КопироватьКаталог(КаталогКонфигурации, КаталогРазниц);

	КопироватьФайл(НаименованиеФайлаПроекта, ЦелевоеНаименованиеФайлаПроекта);	
	
КонецПроцедуры

Процедура КонвертироватьФайлы()

	Команда = Новый Команда;

	ИсходныйКаталог = ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогИнкремента  
		 + "\" + ПараметрыИсполнения.ИмяПроекта + "\";
	ЦелевойКаталог  = ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогКонфигурации 
		+ "\" + ПараметрыИсполнения.ИмяПроекта + "\";

	Команда.УстановитьКоманду("ring");
	Команда.ДобавитьПараметр(ПараметрыИсполнения.ВерсияEDT);
	Команда.ДобавитьПараметр("workspace export");
	Команда.ДобавитьПараметр("--project " + ИсходныйКаталог);
	Команда.ДобавитьПараметр("--configuration-files " + ЦелевойКаталог);
	Команда.ДобавитьПараметр("--workspace-location "  + ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогВременныхФайлов + "\");
	 
	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить("Во время конвертации были ошибки");
	КонецЕсли;

КонецПроцедуры

Процедура ПометитьВсеФайлыДляЗагрузки(ИмяФайла, ИменаФайловДляЗагрузки)

	ПозицияРазделителя = СтрНайти(ИмяФайла, "/", НаправлениеПоиска.СКонца, , 2);

	ПутьПоиска = Лев(ИмяФайла, ПозицияРазделителя);
	ПутьПоиска = СтрЗаменить(ПутьПоиска, "/", "\");
	ПутьПоиска = ТекущийКаталог() + "\" + ПутьПоиска;

	Сообщить("Ищем файлы для обновления: " + ПутьПоиска);

	НайденныеФайлы = НайтиФайлы(ПутьПоиска, "*.xml", Ложь);

	Для Каждого НайденныйФайл Из НайденныеФайлы Цикл
		
		Если НайденныйФайл.ЭтоКаталог() Тогда
			Продолжить;
		КонецЕсли;

		ПутьКФайлу = НайденныйФайл.ПолноеИмя;

		Если ИменаФайловДляЗагрузки.Найти(ПутьКФайлу) = Неопределено Тогда 
			ИменаФайловДляЗагрузки.Добавить(ПутьКФайлу);			
		КонецЕсли;
	
	КонецЦикла; 

КонецПроцедуры 

Функция КонвертироватьИменаФайлов(КаталогКонфигурации, МассивИзмененныхФайлов)

	ИменаФайловДляЗагрузки = Новый Массив;

	Для Каждого ИзмененныйФайл Из МассивИзмененныхФайлов Цикл
		
		ИмяФайла = КаталогКонфигурации + "/" + ИзмененныйФайл;
		ИмяФайла = СтрЗаменить(ИмяФайла, "/src", "");

		ПометитьВсеФайлыДляЗагрузки(ИмяФайла, ИменаФайловДляЗагрузки);
	
	КонецЦикла;

	Возврат ИменаФайловДляЗагрузки;

КонецФункции

Процедура ЗагрузитьФайлыВКонфигурацию()

	ИменаФайловДляЗагрузки = КонвертироватьИменаФайлов(ПараметрыИсполнения.КаталогКонфигурации, 
		ПараметрыИсполнения.МассивИзмененныхФайлов);
	
	Если ИменаФайловДляЗагрузки.Количество() = 0 Тогда
		Сообщить("Не определены файлы для загрузки");
		ЗавершитьРаботу(1);
	КонецЕсли;
	
	ИмяФайлаОбновления = ТекущийКаталог() + "\" + ПараметрыИсполнения.ВременныйФайлСпискаФайлов;

	МассивXML = Новый Массив;
	МассивОстальных = Новый Массив;

	Для Каждого ИзмененныйФайл Из ИменаФайловДляЗагрузки Цикл 
		Если СтрНайти(ИзмененныйФайл, ".xml") <> 0 Тогда
			МассивXML.Добавить(ИзмененныйФайл);
		Иначе
			МассивОстальных.Добавить(ИзмененныйФайл);
		КонецЕсли;
	КонецЦикла;

	ИменаФайловДляЗагрузки = МассивXML;
	
	Для Каждого ОтсортированныйФайл Из МассивОстальных Цикл
		ИменаФайловДляЗагрузки.Добавить(ОтсортированныйФайл);
	КонецЦикла;
	
	ЗаписьТекста = Новый ЗаписьТекста(ИмяФайлаОбновления);

	Для Каждого ИзмененныйФайл Из ИменаФайловДляЗагрузки Цикл

		ЗаписьТекста.ЗаписатьСтроку(ИзмененныйФайл);
		Сообщить("Файл будет загружен: " + ИзмененныйФайл);

	КонецЦикла;

	ЗаписьТекста.Закрыть();

	КомандаЗагрузкиФайлов = ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогКонфигурации + "\" 
		+ ПараметрыИсполнения.ИмяПроекта;

	Команда = Новый Команда;

	//TODO: Забирать параметры подключения из файла params;
	Команда.УстановитьКоманду(ПараметрыИсполнения.ПутьКПлатформе);
	Команда.ДобавитьПараметр("DESIGNER");
	Команда.ДобавитьПараметр(ПараметрыИсполнения.СтрокаПодключения);
	Команда.ДобавитьПараметр("/N " + ПараметрыИсполнения.Пользователь);
	Команда.ДобавитьПараметр("/P " + ПараметрыИсполнения.Пароль);
	Команда.ДобавитьПараметр("/LoadConfigFromFiles " + КомандаЗагрузкиФайлов);
	Команда.ДобавитьПараметр("-listfile " + ИмяФайлаОбновления); 
	Команда.ДобавитьПараметр("/UpdateDBCfg");
	Команда.ДобавитьПараметр("/DumpConfigToFiles " + ТекущийКаталог() + "\tmp");
	Команда.ДобавитьПараметр("-configDumpInfoOnly");
	
	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить("Во время загрузки в конфигурацию были ошибки");
	КонецЕсли;

КонецПроцедуры 

Процедура СформироватьФайлОписанияКонфигурации()

	Команда = Новый Команда;

	Команда.УстановитьКоманду(ПараметрыИсполнения.ПутьКПлатформе);
	Команда.ДобавитьПараметр("DESIGNER");
	Команда.ДобавитьПараметр(ПараметрыИсполнения.СтрокаПодключения);
	Команда.ДобавитьПараметр("/N " + ПараметрыИсполнения.Пользователь);
	Команда.ДобавитьПараметр("/P " + ПараметрыИсполнения.Пароль);
	Команда.ДобавитьПараметр("/DumpConfigToFiles " + ТекущийКаталог());
	Команда.ДобавитьПараметр("-configDumpInfoOnly");
	
	КодВозврата = Команда.Исполнить();
	
	Если КодВозврата <> 0 Тогда
		Сообщить("Во время загрузки в конфигурацию были ошибки");
	КонецЕсли;

КонецПроцедуры 


Функция ПолучитьЗначениеИзВозможныхПараметров(Параметры, ПараметрПорядка, ИменованныйПараметр)

	ЗначениеПараметра = Параметры.Получить(ПараметрПорядка);

	Если Не ЗначениеЗаполнено(ЗначениеПараметра) Тогда
		ЗначениеПараметра = Параметры.Получить(ИменованныйПараметр); 	
	КонецЕсли;

	Возврат ЗначениеПараметра;

КонецФункции

Функция СформироватьПараметрыИсполнения(АргументыКоманднойСтроки) 

	Параметры = ПолучитьПараметры(АргументыКоманднойСтроки);

	ИдентификаторКоммита = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "ИдентификаторКоммита", "--commitid");
	ИмяПроекта           = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "ИмяПроекта", "--project");
	ВерсияEDT            = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "ВерсияEDT", "--edt");
	ПутьКПлатформе	     = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "ПутьКПлатформе", "--platform");
	СтрокаПодключения    = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "СтрокаПодключения", "--base");	
	Пользователь         = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "Пользователь", "--usr");
	Пароль	 	         = ПолучитьЗначениеИзВозможныхПараметров(Параметры, "Пароль", "--pwd");

	Отказ = Ложь;

	Если Отказ Тогда 
		ЗавершитьРаботу(1);
	КонецЕсли;

	ПараметрыИсполненияЛокально = Новый Структура;
	ПараметрыИсполненияЛокально.Вставить("ИдентификаторКоммита", ИдентификаторКоммита);
	ПараметрыИсполненияЛокально.Вставить("ИмяПроекта",  ИмяПроекта);
	ПараметрыИсполненияЛокально.Вставить("ВерсияEDT", ВерсияEDT);
	ПараметрыИсполненияЛокально.Вставить("ПутьКПлатформе", ПутьКПлатформе);
	ПараметрыИсполненияЛокально.Вставить("СтрокаПодключения", СтрокаПодключения);
	ПараметрыИсполненияЛокально.Вставить("Пользователь", Пользователь);
	ПараметрыИсполненияЛокально.Вставить("Пароль", Пароль);

	Отказ = Ложь;

	Для Каждого Параметр Из ПараметрыИсполненияЛокально Цикл
		
		Если Не ЗначениеЗаполнено(Параметр.Значение) Тогда
			Сообщить("Не определено значение обязательного параметра " + Параметр.Ключ);
			Отказ = Истина;
		КонецЕсли;
	
	КонецЦикла;

	Если Отказ Тогда 
		ЗавершитьРаботу(1);
	КонецЕсли;

	// Предопределенные параметры:
	ПараметрыИсполненияЛокально.Вставить("КаталогИнкремента", "tmp\update");
	ПараметрыИсполненияЛокально.Вставить("КаталогКонфигурации", "tmp\config");
	ПараметрыИсполненияЛокально.Вставить("МассивИзмененныхФайлов", Новый Массив());
	ПараметрыИсполненияЛокально.Вставить("КаталогВременныхФайлов", "tmp\workspace");
	ПараметрыИсполненияЛокально.Вставить("ВременныйФайлСпискаФайлов", "tmp\file_list.lst");

	Возврат ПараметрыИсполненияЛокально;

КонецФункции

Процедура ВыполнитьДействияПослеЗагрузки()

	УдалитьФайлы(ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогИнкремента);
	УдалитьФайлы(ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогКонфигурации);
	УдалитьФайлы(ТекущийКаталог() + "\" + ПараметрыИсполнения.КаталогВременныхФайлов);
	УдалитьФайлы(ТекущийКаталог() + "\" + ПараметрыИсполнения.ВременныйФайлСпискаФайлов);
	
КонецПроцедуры

Процедура ВыполнитьКоманду()

	ВыполнитьДействияПослеЗагрузки();
	Сообщить("Копируем измененные объекты...");
	ИнициализироватьКаталогРазниц();
	Сообщить("Конвертируем измененные объекты в формат конфигуратора...");
	КонвертироватьФайлы();
	Сообщить("Загружаем изменения в конфигуратор...");
	ЗагрузитьФайлыВКонфигурацию();
	Сообщить("Формируем файл ConfigDumpInfo.xml");
	СформироватьФайлОписанияКонфигурации();
	ВыполнитьДействияПослеЗагрузки();
	
КонецПроцедуры

ПараметрыИсполнения = СформироватьПараметрыИсполнения(АргументыКоманднойСтроки);
ВыполнитьКоманду();
